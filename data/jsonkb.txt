JSON.SET json:u23n4u2uiu $ '{"title":"What is the Redis Enterprise Cooldown Feature", "content":"Both the cluster and the database have cooldown periods. After node failure, the cluster cooldown period prevents another replica migration due to another node failure for any database in the cluster until the cooldown period ends (default: one hour).", "creation":1582757843, "update":1660967309, "tags":"enterprise, availability, cooldown", "privacy":"internal", "state":"draft", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"q&a"}'
JSON.SET json:2axgd318xp $ '{"title":"Performance Tuning Best Practices", "content":"Check the slow log looking for EVALSHA, HGETALL, HMGET, MGET, and all types of SCAN commands. Lower the slow log threshold to capture more slow commands. Verify the size of keys using redis-cli --bigkeys. Delete huge keys using the asynchronous UNLINK rather than deleting keys using the synchronous DEL. Verify that LUA scripts do not keep the state machine busy with long executions.", "creation":1582566809, "update":1645323476, "tags":"performance, bestpractices, enterprise, oss", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"troubleshooting"}'
JSON.SET json:f2nuf2f24f $ '{"title":"How to Perform Numeric Sorts on Multiple Fields of a Leaderboard?", "content":"In a leaderboard, if you need to sort on different dimensions: e.g. sort players based on their scores, if the score is the same, then sort by their ranking, then sort by the time to complete the task, it is possible to model the scores as NUMERIC SORTABLE fields and use FT.AGGREGATE with the SORTBY argument.", "creation":1582852912, "update":1610476418, "tags":"leaderboards, searching, sorting", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:vvnoino242 $ '{"title":"Scalability Configuration for Redis Cloud Databases", "content":"From the dashboard, the scalability section lets you manage the maximum size, throughput, and hashing policy for a database. The Scalability section is available only for Flexible and Annual plans.", "creation":1579656294, "update":1635070734, "tags":"scalability, cloud, rediscloud", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:weovoo488q $ '{"title":"How to Manage Client Reconnections in case of Errors", "content":"When a connection to a Redis database cannot be established, e.g. when the max connection is reached, the client/application needs to implement a retry mechanism. Retry mechanisms are usually available in the Redis client library of choice, and can be configured using a variety of parameters to achieve the desired behavior.", "creation":1587921950, "update":1637289740, "tags":"clients, clientlibrary, retry", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:0inownrfwr $ '{"title":"What is the Sentinel Discovery Service?", "content":"Redis Enterprise offers a discovery service that is compliant with the Redis Sentinel API. Using such API, it is possible to connect to the desired database using the database name only, without the port. The Sentinel discovery service is an alternative for applications not relying on the DNS resolution service, and it is an IP address-based connection method.", "creation":1651434217, "update":1664114658, "tags":"sentinel, discovery, client, enterprise, cloud", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"q&a"}'
JSON.SET json:42493fhorf $ '{"title":"Is maxmemory the Maximum Value of Used Memory?", "content":"maxmemory is not the exact maximum amount of memory that a Redis instance can use. Each new command may add data to the database even if the memory usage exceeds maxmemory. However, Redis will start evicting keys according to the policy that is configured, depending on the type of key (persistent or volatile) and on the algorithm used (LRU or LFU).", "creation":1621601416, "update":1649018142, "tags":"caching, memory, maxmemory", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"q&a"}'
JSON.SET json:f234r9w9vn $ '{"title":"Do connection limits exist for Redis Cloud?", "content":"Redis Cloud fixed plans allow a maximum number of concurrent connections, check the documentation. A flexible plan has no enforced limit on the number of concurrent connections.", "creation":1579223587, "update":1598592423, "tags":"connectivity, concurrency, cloud, rediscloud", "privacy":"internal", "state":"published", "author":"82v7h38f92h0rvj2398z", "owner":"82v7h38f92h0rvj2398z", "type":"q&a"}'
JSON.SET json:23ioonno34 $ '{"title":"How to enable clustering on a Redis Cloud database?", "content":"Clustering can be enabled post-facto, but you need to ensure that the commands you are running are cluster-safe. Increase the limit of the DB above 25GB which will cause the DB to use multiple shards.", "creation":1620098507, "update":1628621244, "tags":"scalability, clustering, cloud, rediscloud", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:aasd999vod $ '{"title":"Should connection pooling be used?", "content":"It is always recommended to use connection pooling, otherwise, each request will open a new connection. This exposes you to many possible momentary problems that could prevent the opening of the connection. In addition, if you make many requests, you will be frequently opening and closing connections, operations that might fail from time to time.", "creation":1627474864, "update":1634121118, "tags":"connectivity, client, connection, pooling", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"q&a"}'
JSON.SET json:243oifoiff $ '{"title":"How to migrate Redis OSS to RE?", "content":"The suggestion is to use the \"Replica Of\" from the Open Source Redis to RS (Redis Enterprise). It is uni-directional replication so, once done, you should plan the cutover for Maintenance Window. Alternatively, it is possible to perform a logical data migration using RIOT tools.", "creation":1588385244, "update":1672339442, "tags":"migration, oss, enterprise, riot, replication", "privacy":"public", "state":"review", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:fworouwiuv $ '{"title":"How to Flush a Redis database?", "content":"The FLUSHALL command deletes all the keys of all the existing databases, not just the currently selected one. This command never fails.", "creation":1639641925, "update":1668789612, "tags":"delete, flush, database, flushall", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:uiuu43hib7 $ '{"title":"Latency issues and sporadic failures using DEL", "content":"When using DEL to delete large keys, it is possible to increase the latency when the target is a huge key. Try replacing DEL with UNLINK, this command is very similar to DEL: it deletes the specified keys. Just like DEL, a key is ignored if it does not exist. However, the command performs the actual memory reclaiming in a different thread, so it is not blocking, while DEL is.", "creation":1584628545, "update":1614333162, "tags":"latency, performance, delete, unlink", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"troubleshooting"}'
JSON.SET json:vuu7887877 $ '{"title":"How to perform massive key deletion in Redis without impacting performance?", "content":"You can use either `redis-cli` or Redis Insight with bulk actions. Using `redis-cli`, you can indicate a pattern and make sure you: 1) Use -i option so you donâ€™t block the execution of the shard 2) Use unlink, so you execute tasks in the background", "creation":1608285095, "update":1620874392, "tags":"unlink, redisinsight, batching", "privacy":"public", "state":"review", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:vwiurhevbw $ '{"title":"What is Redis Stack?", "content":"Redis Stack consolidates the capabilities of the leading Redis modules into a single product without any performance compromises and makes it easy for developers to build modern real-time applications that are completely based on Redis.", "creation":1616053615, "update":1671674172, "tags":"oss, redisstack, redis", "privacy":"public", "state":"published", "author":"74uvk593odt6g9h5fukv", "owner":"74uvk593odt6g9h5fukv", "type":"q&a"}'
JSON.SET json:iuiu78724i $ '{"title":"How to perform Vector Similarity searches in Python?", "content":"In order to perform Vector Similarity searches in Python, first, create the index to execute the recommendations for similar content. Then, choose a the desired model to compute vector embeddings. Once the vectors are generated, store them. Refer to the query syntax to understand how to perform searches.", "creation":1628179307, "update":1657626165, "tags":"embedding, vector, similarity, vss, python", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:ih98h98w89 $ '{"title":"How to compute a Vector Embedding for an Image?", "content":"With Redis Stack, it is possible to index unstructured sources of data once converted in their corresponding vector embedding, and then use such index to perform similarity search. You can use the Python img2vec library to generate vector embeddings for pictures.", "creation":1620200243, "update":1662124877, "tags":"embedding, similarity, imageprocessing, python", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:oj84h98h98 $ '{"title":"How to model a Geo-tracking Application using Redis?", "content":"Redis geospatial indexes let you store coordinates and search for them. This data structure is useful for finding nearby points within a given radius or bounding box.", "creation":1581700305, "update":1624060058, "tags":"geoindexing, distance, vehicle, tracking", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:wwww98h988 $ '{"title":"Implementing a Session Store with Redis", "content":"Redis offers many options to store and retrieve data efficiently. However, sessions store different types of data: metadata, lists, geographical locations and entire objects. The Hash data structure is an intuitive and natural choice for session data. However, the JSON data structure offers a compact representation of session data, it allows nested data and satisfies a vast variety of search scenarios.", "creation":1617146556, "update":1622446028, "tags":"sessions, sessionstore, json, hash", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'
JSON.SET json:h92jh948jf $ '{"title":"How to Create a Secondary Index for the Hash Data Structure?", "content":"It is possible to create indexes in Redis using the following data structures: sorted sets, sets, and lists. However, Redis Stack automates index creation and management for Hash and JSON documents.", "creation":1616657644, "update":1629113328, "tags":"secondaryindex, searching, index", "privacy":"public", "state":"published", "author":"73kd94jh5v2p9dh583ld", "owner":"73kd94jh5v2p9dh583ld", "type":"how-to"}'


FT.CREATE json_idx ON JSON PREFIX 1 json: SCHEMA  $.title AS title TEXT $.content AS content TEXT $.creation AS creation NUMERIC SORTABLE $.update AS update NUMERIC SORTABLE $.tags AS tags TAG SEPARATOR "," SORTABLE $.privacy AS privacy TAG $.state AS state TAG $.author AS author TAG $.owner AS owner TAG $.type AS type TAG
